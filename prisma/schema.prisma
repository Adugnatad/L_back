generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id     Int         @id @default(autoincrement())
  first_name String      @db.VarChar(99)
  last_name String      @db.VarChar(99)
  phone_number String      @db.VarChar(99) @unique
  email String      @db.VarChar(99) @unique
  password String      @db.VarChar(99)
  date_of_birth String     @db.VarChar(99)
  status user_status
}

model Requirement {
  id          Int      @id @default(autoincrement())
  description String  
}

model Purpose {
  id    Int  @id @default(autoincrement())
  title String       
}

model LoanType {
  id          Int      @id @default(autoincrement())
  name        String  
  description String  
  
}

model Loan {
  id            String    @id @default(uuid()) // Primary key
  type          String
  amount        Float
  status        String
  date          DateTime
  applicant     String
  purpose       String
  interestRate  Float
  term          Int
  stages        LoanStage[]
  messages      LoanMessage[]
}

model LoanStage {
  id        Int      @id @default(autoincrement()) // Primary key
  name      String
  status    String   // Enum-like field: "completed" | "in-progress" | "pending"
  loanId    String
  loan      Loan     @relation(fields: [loanId], references: [id])
}

model LoanMessage {
  id        Int      @id @default(autoincrement()) // Primary key
  message   String
  date      DateTime
  loanId    String
  loan      Loan     @relation(fields: [loanId], references: [id])
}

model Otp {
  id        String   @id @default(uuid())
  otp       String
  userId    String   // Link OTP to a user (if required)
  createdAt DateTime @default(now())
  expiresAt DateTime
  verified  Boolean  @default(false)
}

model Package {
  id              String  @id @default(uuid())
  name            String
  type            String
  apr             Float
  max             Float
}

model Meeting {
  id        String   @id @default(uuid())
  phone_number String @db.VarChar(99)
  date      String
  time      String
  type      MeetingType
  purpose   String
  createdAt DateTime @default(now())
}

model FundTransfer {
  id         String   @id @default(uuid())
  phone_number String @db.VarChar(99)
  sourceBank String
  amount     Float
  purpose    String
  status     PullRequestStatus
  createdAt  DateTime @default(now())
}

model PerformanceFeedback {
  id         String   @id @default(uuid())
  phone_number String @db.VarChar(99)
  rating     Int
  feedback   String
  createdAt  DateTime @default(now())
}

model KYC {
  id                Int      @id @default(autoincrement())
  fullName          String
  gender            String
  dateOfBirth       DateTime
  maritalStatus     String
  phoneNumber       String @unique
  email             String
  residentialStreet String
  residentialCity   String
  residentialSubCity String
  residentialWoreda String?
  mailingStreet     String?
  mailingCity       String?
  mailingSubCity    String?
  mailingWoreda     String?
  idType            String
  idNumber          String
  issuingAuthority  String
  expiryDate        DateTime
  occupation        String
  employerName      String
  employerAddress   String
  income            Float
  incomeFrequency   String
  sourceOfIncome    String
  tin               String
  sameAsResidential Boolean
  passportPhotoType String?
  passportPhotoName String?
  passportPhotoSize Int?
  idScanType        String?
  idScanName        String?
  idScanSize        Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}


enum user_status {
  active
  inactive
}

enum MeetingType {
  video
  in_person
}

enum PullRequestStatus {
  pending
  completed
}